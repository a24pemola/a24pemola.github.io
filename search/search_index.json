{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"actividad_2.1/","title":"Practica 2.1","text":""},{"location":"actividad_2.1/#instalacion-y-configuracion-de-servidor-web-nginx","title":"Instalaci\u00f3n y configuraci\u00f3n de servidor web Nginx","text":"<p>Para instalar el servidor nginx en nuestra Debian, lo primero que hacemos es actualizar los repositorios y luego instalamos el paquete necesario:</p> <pre><code>sudo apt update\n\nsudo apt install nginx\n</code></pre> <p>Despu\u00e9s, verificamos que nginx se haya instalado y que est\u00e9 funcionando bien:</p> <pre><code>systemctl status nginx\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"actividad_2.1/#creacion-de-las-carpeta-del-sitio-web","title":"Creaci\u00f3n de las carpeta del sitio web","text":"<p>Al igual que en Apache, todos los archivos que ser\u00e1n parte de un sitio web servido por nginx se organizan en carpetas. Normalmente, estas carpetas est\u00e1n dentro de <code>/var/www</code>.</p> <p>Vamos a crear la carpeta donde estar\u00e1 nuestro sitio web o dominio:</p> <pre><code>sudo mkdir -p /var/www/nombre_web/html\n</code></pre> <p></p> <p>El \"nombre_web\" puede ser lo que quieras, sin espacios.</p> <p>Luego, dentro de esa carpeta <code>html</code>, clona este repositorio:</p> <p>https://github.com/cloudacademy/static-website-example</p> <p></p> <p>Tambi\u00e9n vamos a hacer que el propietario de esa carpeta y todo lo que est\u00e9 dentro sea el usuario <code>www-data</code>, que suele ser el usuario del servicio web:</p> <p><code>sudo chown -R www-data:www-data /var/www/nombre_web/html</code> </p> <p></p> <p>Le daremos los permisos adecuados para que no tengamos problemas de acceso no autorizado al entrar en el sitio web:</p> <p><code>sudo chmod -R 755 /var/www/nombre_web</code> </p> <p></p> <p>Para comprobar que el servidor est\u00e1 funcionando bien y sirviendo p\u00e1ginas correctamente, puedes acceder desde tu cliente a:</p> <p><code>http://IP-maq-virtual</code></p> <p>Deber\u00eda aparecer algo as\u00ed:</p> <p></p> <p>Lo que significar\u00e1 que est\u00e1 correcto hasta ahora.</p>"},{"location":"actividad_2.1/#configuracion-de-servidor-web-nginx","title":"Configuraci\u00f3n de servidor web NGINX","text":"<p>Para que Nginx pueda mostrar el contenido de nuestra web, necesitamos crear un bloque de servidor con las directivas adecuadas. En lugar de modificar el archivo de configuraci\u00f3n predeterminado, vamos a crear uno nuevo en <code>/etc/nginx/sites-available/nombre_web</code>:</p> <pre><code>sudo nano /etc/nginx/sites-available/vuestro_dominio \n</code></pre> <p>El contenido de ese archivo de configuraci\u00f3n ser\u00eda algo como esto:</p> <pre><code>server {\n        listen 80;\n        listen [::]:80;\n        root /ruta/absoluta/archivo/index;\n        index index.html index.htm index.nginx-debian.html;\n        server_name nombre_web;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p></p> <p>En la directiva <code>root</code>, tienes que poner la ruta completa donde est\u00e9 el archivo <code>index.html</code> de tu p\u00e1gina web, que se encuentra entre los archivos que ya hab\u00e9is descomprimido.</p> <p>Ahora vamos a crear un enlace simb\u00f3lico entre este archivo y el de los sitios habilitados, para que se active autom\u00e1ticamente:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/nombre_web /etc/nginx/sites-enabled/\n</code></pre> <p></p> <p>Y reiniciamos el servidor para aplicar la configuraci\u00f3n:</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p></p>"},{"location":"actividad_2.1/#comprobaciones","title":"Comprobaciones","text":""},{"location":"actividad_2.1/#comprobacion-del-correcto-funcionamiento","title":"Comprobaci\u00f3n del correcto funcionamiento","text":"<p>Como todav\u00eda no tenemos un servidor DNS que traduzca los nombres a IPs, lo vamos a hacer manualmente. Editaremos el archivo <code>/etc/hosts</code> en nuestra m\u00e1quina anfitriona para que asocie la IP de la m\u00e1quina virtual con nuestro <code>server_name</code>.</p> <p>En Linux, este archivo est\u00e1 en <code>/etc/hosts</code>.</p> <p>En Windows lo encontrar\u00e1s en <code>C\\Windows\\System32\\drivers\\etc\\hosts</code>.</p> <p>Ah\u00ed, debemos a\u00f1adir la siguiente l\u00ednea:</p> <p><code>192.168.X.X nombre_web</code></p> <p>Reemplaza \"192.168.X.X\" por la IP de tu m\u00e1quina virtual.</p> <p></p> <p></p>"},{"location":"actividad_2.1/#comprobar-registros-del-servidor","title":"Comprobar registros del servidor","text":"<p>Aseg\u00farate de que las peticiones se est\u00e1n registrando bien en los archivos de logs, tanto las que salen bien como las que fallan:</p> <ul> <li><code>/var/log/nginx/access.log</code>: aqu\u00ed se registra cada solicitud que llega a tu servidor web, a menos que tengas Nginx configurado para otra cosa.</li> </ul> <p></p> <ul> <li><code>/var/log/nginx/error.log</code>: cualquier error que ocurra con Nginx se va a anotar en este archivo.</li> </ul> <p></p>"},{"location":"actividad_2.1/#configurar-servidor-sftp-en-debian","title":"Configurar servidor SFTP en Debian","text":"<p>Primero, vamos a instalarlo desde los repositorios:</p> <pre><code>sudo apt-get update\nsudo apt-get install vsftpd\n</code></pre> <p></p> <p>Ahora, vamos a crear una carpeta en tu home de Debian:</p> <pre><code>mkdir /home/nombre_usuario/ftp\n</code></pre> <p></p> <p>En la configuraci\u00f3n de vsftpd, indicaremos que esta carpeta ser\u00e1 el directorio al que se cambia vsftpd una vez que el usuario se conecta.</p> <p>Luego, vamos a crear los certificados de seguridad necesarios para a\u00f1adir una capa de cifrado a la conexi\u00f3n (algo parecido a HTTPS):</p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem\n</code></pre> <p></p> <p>Una vez hecho esto, pasamos a configurar vsftpd como tal. Usa el editor de texto que prefieras para editar el archivo de configuraci\u00f3n del servicio, por ejemplo con nano:</p> <pre><code>sudo nano /etc/vsftpd.conf\n</code></pre> <p>Primero, busca estas l\u00edneas en el archivo y elim\u00ednalas por completo:</p> <pre><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n</code></pre> <p></p> <p>Despu\u00e9s, a\u00f1ade estas l\u00edneas en su lugar:</p> <pre><code>rsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\n\nlocal_root=/home/nombre_usuario/ftp\n</code></pre> <p></p> <p>Finalmente, guarda los cambios y reinicia el servicio para que aplique la nueva configuraci\u00f3n:</p> <pre><code>sudo systemctl restart --now vsftpd\n</code></pre> <p></p> <p>Una vez terminada esta configuraci\u00f3n, ya podr\u00e1s acceder a tu servidor usando un cliente FTP como Filezilla de dos maneras:</p> <ul> <li> <p>Por el puerto 21 (el puerto por defecto de FTP, que es inseguro), pero utilizando certificados para cifrar los datos, haci\u00e9ndolo seguro.</p> </li> <li> <p>Usando el protocolo SFTP, que se dedica al intercambio de datos con una conexi\u00f3n parecida a SSH, usando el puerto 22.</p> </li> </ul> <p>En mi caso utilic\u00e9 el puerto 22 porque el 21 parec\u00eda dar m\u00e1s error.</p> <p>Despu\u00e9s de descargar un cliente FTP en tu ordenador, introduce los datos necesarios para conectarte a tu servidor FTP en Debian:</p> <p></p> <ul> <li> <p>IP de Debian (recuadro rojo)</p> </li> <li> <p>Nombre de usuario de Debian (recuadro verde)</p> </li> <li> <p>Contrase\u00f1a del usuario (recuadro fucsia)</p> </li> <li> <p>Puerto de conexi\u00f3n, que ser\u00e1 el 22 conectando por SFTP (recuadro marr\u00f3n)</p> </li> </ul> <p>Al usar las claves de SSH (como ya hicimos en la Pr\u00e1ctica 1), no necesitas poner la contrase\u00f1a, solo el nombre de usuario.</p> <p>Al conectarte con claves FTP con Conexi\u00f3n r\u00e1pida, te saldr\u00e1 el mismo aviso que cuando te conectaste por primera vez por SSH a Debian. Lo aceptas, ya que no hay ning\u00fan peligro.</p> <p>Te conectar\u00e1s directamente a la carpeta que especificamos en el archivo de configuraci\u00f3n: <code>/home/lara/ftp</code>.</p> <p></p> <p>Una vez conectado, en el lado izquierdo de la pantalla (tu ordenador) buscas una imagen cualquiera (por ejemplo). En el lado derecho (el servidor), busca la carpeta donde quieres subir el archivo. Con un doble clic o haciendo clic derecho &gt; subir, lo transfieres al servidor.</p> <p>Recuerda que tu sitio web debe estar en la carpeta <code>/var/www</code> y es necesario darle los permisos adecuados, como hicimos con el otro sitio web.</p>"},{"location":"actividad_2.1/#https","title":"HTTPS","text":"<p>En esta parte vamos a a\u00f1adir una capa extra de seguridad a nuestro servidor. Vamos a hacer que todos los sitios web que tengamos usen certificados SSL y que se acceda a ellos a trav\u00e9s de HTTPS.</p> <p>Para hacerlo, y como prueba, vamos a generar unos certificados autofirmados. Luego, en el archivo de configuraci\u00f3n de nuestros hosts virtuales (los sitios web que ya configuramos), cambiaremos los par\u00e1metros que hagan falta.</p> <p>Puedes buscar en Internet para guiarte y conseguir el resultado que necesitas.</p> <p>En mi caso, me ayud\u00e9 de internet y la ayuda de unos amigos programadores.</p>"},{"location":"actividad_2.1/#redireccion-http-a-https","title":"Redirecci\u00f3n HTTP a HTTPS","text":"<p>Cuando hayas terminado de habilitar HTTPS en tus sitios web, puedes pasar a esta tarea.</p> <p>F\u00edjate que con la configuraci\u00f3n actual, tu sitio web es accesible de dos formas al mismo tiempo: por el puerto 80 (HTTP, que es inseguro) y por el puerto 443 (HTTPS, que es seguro). Como queremos dejar todo bien configurado y sin posibles fallos de seguridad, el objetivo es que, si un usuario accede a tu sitio por el puerto 80 (HTTP), autom\u00e1ticamente se le redirija a HTTPS, en el puerto 443, por seguridad.</p> <p>Busca la informaci\u00f3n necesaria para hacer esta redirecci\u00f3n autom\u00e1tica ajustando tus archivos de configuraci\u00f3n de hosts virtuales.</p> <p>De nuevo, personalmente me ayud\u00e9 de internet y unos amigos programadores.</p> <p>Para finalmente, terminarlo:</p> <p></p> <p></p>"},{"location":"actividad_2.1/#cuestiones-finales","title":"Cuestiones finales","text":"<p>\u00bfQu\u00e9 pasa si no hago el link simb\u00f3lico entre <code>sites-available</code> y <code>sites-enabled</code> de mi sitio web?</p> <p>Si no haces el enlace simb\u00f3lico entre <code>sites-available</code> y <code>sites-enabled</code>, tu sitio web no estar\u00e1 activo y Nginx no lo reconocer\u00e1. Esto significa que no podr\u00e1s acceder a tu sitio a trav\u00e9s de la web, ya que Nginx no lo servir\u00e1. As\u00ed que es un paso importante para que tu sitio est\u00e9 disponible.</p> <p>\u00bfQu\u00e9 pasa si no le doy los permisos adecuados a <code>/var/www/nombre_web</code>?</p> <p>Si no le das los permisos adecuados a <code>/var/www/nombre_web</code>, tu servidor web no podr\u00e1 acceder a los archivos de tu sitio. Esto puede causar errores al intentar cargar la p\u00e1gina, y los usuarios ver\u00e1n mensajes de acceso denegado. En resumen, tu sitio no funcionar\u00e1 correctamente.</p>"},{"location":"actividad_2.2/","title":"Practica 2.2","text":""},{"location":"actividad_2.2/#autenticacion-en-nginx","title":"Autenticaci\u00f3n en Nginx","text":""},{"location":"actividad_2.2/#paquetes-necesarios","title":"Paquetes necesarios","text":"<p>Podemos usar la herramienta openssl para crear contrase\u00f1as.</p> <p>Se puede comprobar si la tenemos instalada con el siguiente comando:</p> <pre><code>dpkg -l | grep openssl\n</code></pre> <p>En mi caso, estaba instalado:</p> <p></p>"},{"location":"actividad_2.2/#creacion-de-usuarios-y-contrasenas-para-el-acceso-web","title":"Creaci\u00f3n de usuarios y contrase\u00f1as para el acceso web","text":"<p>Crearemos un archivo oculto llamado \u201c.htpasswd\u201d en el directorio de configuraci\u00f3n <code>/etc/nginx</code> donde guardar nuestros usuarios y contrase\u00f1as (la -c es para crear el archivo): </p> <pre><code>sudo sh -c \"echo -n 'vuestro_nombre:' &gt;&gt; /etc/nginx/.htpasswd\"\n</code></pre> <p></p> <p>Y a continuaci\u00f3n creamos el password cifrado para el usuario:</p> <pre><code>sudo sh -c \"openssl passwd -apr1 &gt;&gt; /etc/nginx/.htpasswd\"\n</code></pre> <p></p> <p>Se pueden crear tantos usuarios como haga falta. Para este ejercicio, yo he creado dos, uno para mi nombre, y otro para mi apellido.</p> <p>Podemos comprobar que los usuarios y contrase\u00f1as est\u00e1n cifrados:</p> <pre><code>cat /etc/nginx/.htpasswd\n</code></pre> <p></p>"},{"location":"actividad_2.2/#configurando-el-servidor-nginx-para-usar-autenticacion-basica","title":"Configurando el servidor Nginx para usar autenticaci\u00f3n b\u00e1sica","text":"<p>Para poder proteger nuestra web teniendo que introducir el usuario y contrase\u00f1a, debemos modificar nuestro archivo en:</p> <pre><code>sudo nano /etc/nginx/sites-available/nombre_web\n</code></pre> <p></p> <p>Y a\u00f1adir <code>auth_basic</code> dentro de location, junto a <code>auth_basic_user_file</code> y el fichero que hemos creado anteriormente para las contrase\u00f1as.</p> <p></p> <p>Tras ello, debemos reiniciar el servicio para ue se apliquen los cambios y podamos comprobarlo:</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p></p>"},{"location":"actividad_2.2/#probando-la-nueva-configuracion","title":"Probando la nueva configuraci\u00f3n","text":"<p>Al intentar ahora entrar a la web desde mi m\u00e1quina, pide un usuario y contrase\u00f1a:</p> <p></p> <p>Si se cancela, se denega el acceso a la misma:</p> <p></p> <p>Para la Tarea 1 se ha probado con un usuario bueno y otro err\u00f3neo, y comprobando los logs de <code>access.log</code> se pueden ver los logins de los que han podido entrar con \u00e9xito:</p> <p></p> <p>Y si comprobamos los logs de <code>error.log</code> podemos ver los que han fallado:</p> <p></p> <p>A continuaci\u00f3n se pide el denegar acceso a solo cierta parte de la p\u00e1gina, pero como nuestras webs es\u00e1n faltas del mencionado <code>contact.html</code>, he escrito c\u00f3mo se ver\u00eda si quisi\u00e9semos denegar acceso al mismo incluso si en mi p\u00e1gina no hace nada:</p> <p></p>"},{"location":"actividad_2.2/#combinacion-de-la-autenticacion-basica-con-la-restriccion-de-acceso-por-ip","title":"Combinaci\u00f3n de la autenticaci\u00f3n b\u00e1sica con la restricci\u00f3n de acceso por IP","text":"<p>Tambi\u00e9n podemos usar las restricciones para denegar el acceso a partir de las IP. con la ayuda de <code>allow</code> y <code>deny</code>. Y se pueden perfectamente combinar las IP con la necesidad de identificaci\u00f3n de usuario.</p> <p>En la Tarea 1 de esta secci\u00f3n se ped\u00eda denegar el acceso a la IP de nuestra m\u00e1quina anfitriona:</p> <p></p> <p>Y si comprobamos tras guardar y reiniciar, deber\u00eda darnos otro error:</p> <p></p> <p>El cu\u00e1l tambi\u00e9n podemos comprobar a trav\u00e9s del <code>error.log</code>:</p> <p></p> <p>Como se mencion\u00f3 anteriormente, tambi\u00e9n se puede configurar para que se necesite acceso desde cierta IP o con la autentificaci\u00f3n de usuario, y lo podemos hacer as\u00ed:</p> <p></p> <p>Al probar entrar a la p\u00e1gina desde mi m\u00e1quina, se comprueba que esta vez me deja entrar, por darme derecho a la IP de que puedo acceder:</p> <p></p>"},{"location":"actividad_2.2/#cuestiones-finales","title":"Cuestiones finales","text":""},{"location":"actividad_2.2/#cuestion-1","title":"Cuesti\u00f3n 1","text":"<p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio <code>web_muy_guay</code> de mi sitio web, equivoc\u00e1ndome al poner el usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>    location /web_muy_guay {\n    #...\n    satisfy all;    \n    deny  172.1.10.6;\n    allow 172.1.10.15;\n    allow 172.1.3.14;\n    deny  all;\n    auth_basic \"Cuesti\u00f3n final 1\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>Respuesta: Supuestamente no deber\u00eda dejar entrar, ya que pide tanto la IP como el usuario correcto.</p>"},{"location":"actividad_2.2/#cuestion-2","title":"Cuesti\u00f3n 2","text":"<p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio <code>web_muy_guay</code> de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>    location /web_muy_guay {\n    #...\n    satisfy all;    \n    deny  all;\n    deny  172.1.10.6;\n    allow 172.1.10.15;\n    allow 172.1.3.14;\n\n    auth_basic \"Cuesti\u00f3n final 2: The revenge\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>Respuesta: Esta vez se puede acceder, porque esa IP en concreto tiene el permiso para entrar Y el usuario se ha introducido bien, incluso con el <code>deny all</code> de por medio.</p>"},{"location":"actividad_2.2/#cuestion-3","title":"Cuesti\u00f3n 3","text":"<p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio <code>web_muy_guay</code> de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>    location /web_muy_guay {\n    #...\n    satisfy any;    \n    deny  172.1.10.6;\n    deny 172.1.10.15;\n    allow 172.1.3.14;\n\n    auth_basic \"Cuesti\u00f3n final 3: The final combat\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>Respuesta: No podr\u00edamos acceder desde esa IP porque est\u00e1 denegada. Esa prohibici\u00f3n tiene prioridad sobre el <code>satisfy any</code>.</p>"},{"location":"actividad_2.2/#cuestion-4","title":"Cuesti\u00f3n 4","text":"<p>A lo mejor no sab\u00e9is que tengo una web para documentar todas mis excursiones espaciales con Jeff, es esta: Jeff Bezos y yo.</p> <p>Supongamos que quiero restringir el acceso al directorio de proyectos porque es muy secreto, eso quiere decir a\u00f1adir autenticaci\u00f3n b\u00e1sica a la URL:<code>Proyectos</code></p> <p>Completa la configuraci\u00f3n para conseguirlo:</p> <p>Ejemplo sin el c\u00f3digo</p> <pre><code>    server {\n        listen 80;\n        listen [::]:80;\n        root /var/www/freewebsitetemplates.com/preview/space-science;\n        index index.html index.htm index.nginx-debian.html;\n        server_name freewebsitetemplates.com www.freewebsitetemplates.com;\n        location              {\n\n            try_files $uri $uri/ =404;\n        }\n    }\n</code></pre> <p>C\u00f3digo modificado</p> <pre><code>    server {\n        listen 80;\n        listen [::]:80;\n        root /var/www/freewebsitetemplates.com/preview/space-science;\n        index index.html index.htm index.nginx-debian.html;\n        server_name freewebsitetemplates.com www.freewebsitetemplates.com;\n        location              {\n\n            try_files $uri $uri/ =404;\n        }\n        location /Proyectos {\n                auth_basic \"\u00c1rea restringida\";\n                auth_basic_user_file /etc/nginx/.htpasswd;\n                try_files $uri $uri/ =404;\n        }\n    }\n</code></pre>"}]}